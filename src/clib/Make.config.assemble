#-----------------------------------------------------------------------
#
# This make include file is used for assigning appropriate values to
# the following variables given CONFIG_* and MACH_* variables:
#
# Compilers
#
#    CPP                C preprocessor
#    CC                 C compiler
#    CXX                C++ compiler
#    FC                 Fortran 77 compiler
#    F90                Fortran 90 compiler
#    LD                 Linker 
# 
# Compiler flags
#
#    CPPFLAGS           Flags for the C preprocessor
#    CFLAGS             Flags for the C compiler
#    CXXFLAGS           Flags for the C++ compiler
#    FFLAGS             Flags for the Fortran 77 compiler
#    F90FLAGS           Flags for the Fortran 90 compiler
#    LDFLAGS            Flags for the Linker      
#                      
# Preprocessor defines
#
#    DEFINES            Preprocessor defines for C, C++, and Fortran
#
# Object files
#
#    OBJS              List of all object files to compile
#    OBJS_LIB          Same list, without X_Main.o
#
#
# Libraries
#
#    LIBS              List of all libraries to link
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# DETERMINE INTEGER SIZE SETTINGS
#-----------------------------------------------------------------------

    ERROR_INTEGERS = 1

    # Settings for 32-bit integers

    ifeq ($(CONFIG_INTEGERS),32)
        ERROR_INTEGERS = 0
        ASSEMBLE_INTEGER_DEFINES = -DSMALL_INTS
        ASSEMBLE_INTEGER_FFLAGS = $(MACH_FFLAGS_INTEGER_32)
    endif

    # Settings for 64-bit integers

    ifeq ($(CONFIG_INTEGERS),64)
        ERROR_INTEGERS = 0
        ASSEMBLE_INTEGER_DEFINES = -DLARGE_INTS
        ASSEMBLE_INTEGER_FFLAGS = $(MACH_FFLAGS_INTEGER_64)
    endif

    # error if CONFIG_INTEGERS is incorrect

    ifeq ($(ERROR_INTEGERS),1)
       .PHONY: error_integers
       error_integers:
	$(error Illegal value '$(CONFIG_INTEGERS)' for $$(CONFIG_INTEGERS))
    endif

#-----------------------------------------------------------------------
# DETERMINE FLOATING POINT PRECISION SETTINGS
#-----------------------------------------------------------------------

    ERROR_PRECISION = 1

    # Settings for 32-bit floating point baryon precision

    ifeq ($(CONFIG_PRECISION),32)
        ERROR_PRECISION = 0
        ASSEMBLE_PRECISION_DEFINES = -DCONFIG_BFLOAT_4
        ASSEMBLE_PRECISION_FFLAGS = $(MACH_FFLAGS_REAL_32)
        ASSEMBLE_PRECISION_NUMBER = 4
    endif

    # Settings for 64-bit floating point baryon precision

    ifeq ($(CONFIG_PRECISION),64)
        ERROR_PRECISION = 0
        ASSEMBLE_PRECISION_DEFINES = -DCONFIG_BFLOAT_8
        ASSEMBLE_PRECISION_FFLAGS = $(MACH_FFLAGS_REAL_64)
        ASSEMBLE_PRECISION_NUMBER = 8
    endif

    # error if CONFIG_PRECISION is incorrect

    ifeq ($(ERROR_PRECISION),1)
       .PHONY: error_precision
       error_precision:
	$(error Illegal value '$(CONFIG_PRECISION)' for $$(CONFIG_PRECISION))
    endif

#=======================================================================
# DETERMINE MPI USAGE
#=======================================================================

    ERROR_USE_MPI = 1

    ASSEMBLE_CPP = $(MACH_CPP)

    # compilers and settings if USE_MPI is yes

    ifeq ($(CONFIG_USE_MPI),yes)
        ERROR_USE_MPI = 0
        ASSEMBLE_CC  = $(MACH_CC_MPI)
        ASSEMBLE_CXX = $(MACH_CXX_MPI)
        ASSEMBLE_FC  = $(MACH_FC_MPI)
        ASSEMBLE_F90 = $(MACH_F90_MPI)
        ASSEMBLE_LD  = $(MACH_LD_MPI)
        ASSEMBLE_MPI_DEFINES  = -DUSE_MPI
        ASSEMBLE_MPI_INCLUDES = $(MACH_INCLUDES_MPI)
        ASSEMBLE_MPI_LIBS     = $(MACH_LIBS_MPI)
    endif

    # compilers and settings if USE_MPI is no

    ifeq ($(CONFIG_USE_MPI),no)
        ERROR_USE_MPI = 0
        ASSEMBLE_CC  = $(MACH_CC_NOMPI)
        ASSEMBLE_CXX = $(MACH_CXX_NOMPI)
        ASSEMBLE_FC  = $(MACH_FC_NOMPI)
        ASSEMBLE_F90 = $(MACH_F90_NOMPI)
        ASSEMBLE_LD  = $(MACH_LD_NOMPI)
    endif

    # error if CONFIG_USE_MPI is incorrect

    ifeq ($(ERROR_USE_MPI),1)
       .PHONY: error_compilers
       error_compilers:
	$(error Illegal value '$(CONFIG_USE_MPI)' for $$(CONFIG_USE_MPI))
    endif

#-----------------------------------------------------------------------
# DETERMINE OPTIMIZATION LEVEL SETTINGS
#-----------------------------------------------------------------------

    ERROR_OPT = 1

    # Settings for verbose warnings 

    ifeq ($(CONFIG_OPT),warn)
        ERROR_OPT = 0
        ASSEMBLE_OPT_FLAGS = $(MACH_OPT_WARN)
    endif

    # Settings for debugging

    ifeq ($(CONFIG_OPT),debug)
        ERROR_OPT = 0
        ASSEMBLE_OPT_FLAGS = $(MACH_OPT_DEBUG)
    endif

    # Settings for debugging CUDA

    ifeq ($(CONFIG_OPT),cudadebug)
        ERROR_OPT = 0
        ASSEMBLE_OPT_FLAGS = $(MACH_OPT_DEBUG)
        ASSEMBLE_CUDAFLAGS = $(MACH_OPT_CUDADEBUG)
	ASSEMBLE_CUDADEBUG_DEFINES = -DECUDADEBUG
    endif

    # Settings for high conservative optimization

    ifeq ($(CONFIG_OPT),high)
        ERROR_OPT = 0
        ASSEMBLE_OPT_FLAGS = $(MACH_OPT_HIGH)
    endif

    # Settings for aggressive optimization

    ifeq ($(CONFIG_OPT),aggressive)
        ERROR_OPT = 0
        ASSEMBLE_OPT_FLAGS = $(MACH_OPT_AGGRESSIVE)
    endif

    # error if CONFIG_OPT is incorrect

    ifeq ($(ERROR_OPT),1)
       .PHONY: error_opt
       error_opt:
	$(error Illegal value '$(CONFIG_OPT)' for $$(CONFIG_OPT))
    endif

#=======================================================================
# ASSIGN ALL OUTPUT VARIABLES
#=======================================================================

    CPP      = $(ASSEMBLE_CPP)
    CC       = $(ASSEMBLE_CC)
    CXX      = $(ASSEMBLE_CXX)
    FC       = $(ASSEMBLE_FC)
    F90      = $(ASSEMBLE_F90)
    LD       = $(ASSEMBLE_LD)
    CUDACOMPILER = $(ASSEMBLE_CUDACOMPILER)
    CUDACOMPFLAGS = $(ASSEMBLE_CUDAFLAGS)

    CPPFLAGS = $(MACH_CPPFLAGS)
    CFLAGS   = $(MACH_CFLAGS) \
               $(ASSEMBLE_OPT_FLAGS)
    CXXFLAGS = $(MACH_CXXFLAGS) \
               $(ASSEMBLE_OPT_FLAGS)
    FFLAGS   = $(MACH_FFLAGS) \
               $(ASSEMBLE_PRECISION_FFLAGS) \
               $(ASSEMBLE_INTEGER_FFLAGS) \
               $(ASSEMBLE_OPT_FLAGS)
    F90FLAGS = $(MACH_F90FLAGS) \
               $(ASSEMBLE_PRECISION_FFLAGS) \
               $(ASSEMBLE_INTEGER_FFLAGS) \
               $(ASSEMBLE_OPT_FLAGS)
    LDFLAGS  = $(MACH_LDFLAGS) \
               $(ASSEMBLE_OPT_FLAGS)

    DEFINES = $(MACH_DEFINES) \
              $(ASSEMBLE_INTEGER_DEFINES) \
              $(ASSEMBLE_IO_DEFINES) \
              $(ASSEMBLE_MPI_DEFINES) \
              $(ASSEMBLE_PRECISION_DEFINES)

    INCLUDES = $(MACH_INCLUDES) \
    	       $(ASSEMBLE_MPI_INCLUDES) \
               $(MAKEFILE_INCLUDES)   -I.

    OBJS_LIB = $(OBJS_CONFIG_LIB) \
    	       $(OBJS_PHOTON_LIB) \
    	       $(OBJS_LCAPERF_LIB) \
	       $(OBJS_HYDRO_RK) \
	       $(OBJS_ECUDA_LIB) \
	       $(OBJS_PYTHON) 

    LIBS = $(MACH_LIBS) \
           $(ASSEMBLE_MPI_LIBS)
